integer
integer
integer
integer
integer
integer
integer
integer
integer
epsilon decl list

parsing tree
test1: function integer (a: integer, b: integer)
test2: function boolean (a: integer, b: integer)
test3: function string (a: integer)
main: function void () = {
    str: string = "hi";
}
test3: function string (a: boolean) = {
    return "hello!";
}
test2: function integer (a: integer, b: integer) = {
    return a + b;
}

done printing tree
curr scope on enter: 1
name : test1 entered scope : 1
name : test2 entered scope : 1
name : test3 entered scope : 1
name : main entered scope : 1
curr scope on enter: 2
curr scope on enter: 3
name : str entered scope : 3
curr scope on exit: 2
curr scope on exit: 1
name : test3 entered scope : 1
curr scope on enter: 2
name : a entered scope : 2
curr scope on enter: 3
curr scope on exit: 2
curr scope on exit: 1
name : test2 entered scope : 1
curr scope on enter: 2
name : a entered scope : 2
name : b entered scope : 2
curr scope on enter: 3
curr scope on exit: 2
curr scope on exit: 1
curr scope on exit: 0
